---
title: "Indifference curves"
format: html
execute:
  echo: false
jupyter: python3
---

# Plotting Utility functions

```{python}
# import all the good stuff
import numpy as np
import plotly.graph_objects as go
#this contains a lists of colours used to make the graphs
import plotly.express as px
# To make a table of the 3d coords
import pandas as pd
```

Suppose the a utility function, $U(x,y)=xy$, where $x$ is the quantity of good $x$, and, $y$ is the quantity of good $y$. Since the utility depends on two variables, $x$ and $y$, if we draw a graph of $U$ it requires $3$ dimensions. 

## Indifference curves

Since drawing in 3d is hard it is useful to consider indifference curves. These are contor lines of the utility function. The intereactive diagram below shows the utility function plotted in 3d, with some indifference curves above. The curves show all the $x$, $y$ points which have the same utility, hence the consumer is indifferent to the combination of $x$ and $y$ shown by the line.  

```{python}
#make a mesh, the j bit defines the number of points between 0 and 10
x, y = np.mgrid[0:10:100j, 0:10:100j]
z = x*y
fig = go.Figure(go.Surface(x=x,y=y,z=z, contours = {"z": {"show": True, "start": 5, "end": 100, "size": 10}}))
#add contor lines to 'roof' of plot
fig.update_traces(contours_z=dict(show=True, usecolormap=True, highlightcolor="limegreen", project_z=True))
# choose camera position
fig.update_layout(title='Indifference Curves', autosize=False,               scene_camera_eye=dict(x=-1.5, y=-1.5, z=-0.64), width=600, height=500)
fig.show()
# useful info: https://plotly.com/python/3d-surface-plots/

#maybe offer this for accessibility https://stackoverflow.com/questions/56545819/is-there-a-way-to-export-an-stl-file-from-a-matplotlib-surface-plot
```

:::{.callout-tip collapse="true"}
## See the coordinates that make the surface here.

```{python}
#experiment to make 3d coords accessible

x, y = np.mgrid[0:10:11j, 0:10:11j]
z = x*y
df = pd.DataFrame(z)
df.to_html()
```
:::

The corresponding indifferent curve for $U(x,y)= c$, where $c$ is a constant, is plotted below. Move the slider to change the value of $c$. It starts with $c=5$.

```{python}
colours = px.colors.sequential.Plasma_r
colours.reverse()
fig = go.Figure()
# Add traces, one for each slider step
utilities = np.arange(5, 100, 10)
for i, step in enumerate(utilities):
    fig.add_trace(
        go.Contour(
            visible=False,
            name="U =" + str(step),
            z=z,
            contours_coloring='lines',
            colorscale = [[0,colours[i]],[1,colours[i]]],
            #set the start and end of colour scale to same colour to match the 3d graph
            line_width=2,
            contours = dict(start=step, end=step), 
            showscale=False))


# Create and add slider
steps = []
for i in range(len(fig.data)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)},
              {"title": "Indifference curve with U(x,y) = " + str(utilities[i])}],  # layout attribute
    )
    step["args"][0]["visible"][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)

sliders = [dict(
    active=0,
    currentvalue={"prefix": "Utility: "},
    pad={"t": 50},
    steps=steps
)]

fig.update_layout(
    xaxis_title="x",
    yaxis_title="y",
    showlegend=False,
    sliders=sliders
)

# Make 0th trace visible
fig.data[0].visible = True
fig.show()

```

